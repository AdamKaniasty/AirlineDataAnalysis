labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_minimal() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
?style
library(ggthemes)
install.packages("ggthemes")
library(ggthemes)
# Same but different
ggplot(dane, aes(x = as.Date(Date, "%b %d"), y = Temp)) +
geom_jitter(aes(color=Temp, size = Temp), alpha = 0.7) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_minimal() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_minimal() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023")) %>%
style()
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_minimal() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023")) %>%
style()
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_few() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_minimal() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_solarized() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_economist() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_economist_white() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_foundation() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_base() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_stata() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_gdocs() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
library(readr)
install.packages("extrafont")
library(extrafont)
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_gdocs() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
legend.key.height = 10,
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_gdocs() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
legend.key.height = (10),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
rlang::last_trace()
?unit
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_gdocs() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
legend.key.height = unit(3, "cm"),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_gdocs() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
legend.key.height = unit(5, "cm"),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_gdocs() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
legend.key.height = unit(5, "cm"),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_gdocs() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
legend.key.height = unit(100, "px"),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
?unit
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_gdocs() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
legend.key.height = unit(100, "npc"),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_gdocs() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
legend.spacing.y = unit(10,"npc")
axis.line = element_line(color = "grey", linewidth = 0.4),
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_gdocs() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
legend.spacing.y = unit(10,"npc"),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
g <- ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_gdocs() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
legend.spacing.y = unit(20,"npc"),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
plotly::ggplotly(g, tooltip = c("y", "text"), dynamicTicks = T) %>%
rangeslider(start = as.Date("1-05-2023"), end = as.Date("30-09-2023"))
ggplot(dane, aes(x = Date, y = Temp, text = paste0("Data: ", format(Date, "%b %d")))) +
geom_point(aes(color=Temp), size = 2.5) +
labs(x = "Data", y = "Temperatura [F]", color = "Temp.", title = "Temperatura w czasie") +
theme_gdocs() +
theme(plot.title = element_text(family = "Helvetica", face = "bold", size = 15, colour = "darkred"),
legend.title = element_text(colour = "red3", face = "bold.italic", family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (10), colour = "red3", face = "bold"),
panel.grid.major.x = element_blank(),
legend.spacing.y = unit(20,"npc"),
axis.line = element_line(color = "grey", linewidth = 0.4),
axis.text.x = element_text(angle = 40),
axis.ticks.y = element_line(colour = "darkred", linewidth = 0.5) ) +
scale_color_gradient(low = "yellow3", high = "red3") +
scale_y_continuous(limit= c(40,100))
library(ggplot2)
library(dplyr)
library(plotly)
library(listviewer)
library(ggthemes) # motywy wykresu, palety kolorów i kształtów
library(readr) # odczyt plików xlsx ?
library(extrafont) # czcionki
# Trying harder - better interactive plot
dane <- airquality %>%
mutate(Date = paste(Day, Month, sep="-")) %>%
mutate(Date = as.Date(Date, format="%d-%m"))
shiny::runApp('Changes_in_time_interactive')
runApp('Changes_in_time_interactive')
runApp('Changes_in_time_interactive')
?select
runApp('Changes_in_time_interactive')
runApp('Changes_in_time_interactive')
dane2 <- airquality %>%
mutate(Date = paste(Day, Month, sep="-")) %>%
mutate(Date = as.Date(Date, format="%d-%m"))
dane2 <- dane2[, c("Date")]
View(dane2)
runApp('Changes_in_time_interactive')
runApp('Changes_in_time_interactive')
runApp('Changes_in_time_interactive')
runApp('Changes_in_time_interactive')
install.packages("RMySQL")
install.packages("DBI")
source("~/Desktop/Semestr 2/PDU/Projekty/AirlineDataAnalysis/src/utils/MySqlConnect.R", echo=TRUE)
db <- dbConnect(RMySQL::MySQL(), user = 'Hubert', password = read_file("./passwd.txt"), dbname = 'airplanes', host = 'localhost')
setwd("~/Desktop/Semestr 2/PDU/Projekty/AirlineDataAnalysis")
queries_csv <- read.csv("./src/queries.csv", header = T)
View(queries_csv)
View(queries_csv)
library(RMySQL)
source("./src/utils/MySqlConnect.R")
dbDisconnect(db)
library(RMySQL)
source("./src/utils/MySqlConnect.R")
source("./src/utils/MySqlConnect.R")
library(RMySQL)
source("./src/utils/MySqlConnect.R")
db <- dbConnect(RMySQL::MySQL(), user = 'root', password = read_file("./passwd.txt"), dbname = 'airplanes', host = 'localhost')
dbListTables(db)
source("./src/utils/MySqlConnect.R")
dbListTables(db)
print(queries)
res <- dbGetQuery(db, queries$GetAllSample)
dbDisconnect(db)
shiny::runApp('~/Changes_in_time_interactive')
res <- dbGetQuery(db, queries$GetAllSample)
db <- dbConnect(RMySQL::MySQL(), user = 'root', password = read_file("./passwd.txt"), dbname = 'airplanes', host = 'localhost')
queries_csv <- read.csv("./src/queries.csv", header = T)
name_vec <- queries_csv$Name
query_vec <- queries_csv$Query
queries <- list()
for (i in 1:length(name_vec)) {
queries[[name_vec[i]]] <- query_vec[i]
}
source("./src/utils/MySqlConnect.R")
dbListTables(db)
res <- dbGetQuery(db, queries$GetAllSample)
dbDisconnect(db)
View(res)
source("./src/utils/MySqlConnect.R")
source("./src/utils/MySqlConnect.R")
queries_csv <- read.csv("./src/queries.csv", header = T)
source("./src/utils/MySqlConnect.R")
res <- dbGetQuery(db, queries$GetAllSample)
View(res)
res <- dbGetQuery(db, queries$GetAllSample)
View(res)
res2 <- dbGetQuery(db, queries$TestSample)
View(res2)
source("./src/utils/MySqlConnect.R")
res2 <- dbGetQuery(db, queries$TestSample)
source("./src/utils/MySqlConnect.R")
res2 <- dbGetQuery(db, queries$TestSample)
source("./src/utils/MySqlConnect.R")
res2 <- dbGetQuery(db, queries$TestSample)
db <- dbConnect(RMySQL::MySQL(), user = 'root', password = read_file("./passwd.txt"), dbname = 'airplanes', host = 'localhost')
res2 <- dbGetQuery(db, queries$TestSample)
source("./src/utils/MySqlConnect.R")
res2 <- dbGetQuery(db, queries$TestSample)
res2 <- dbGetQuery(db, queries$TestSample)
dbDisconnect(db)
source("./src/utils/MySqlConnect.R")
res2 <- dbGetQuery(db, queries$TestSample)
res2 <- dbGetQuery(db, queries$TestSample)
queries_csv <- read.csv("./src/queries.csv", header = T)
queries <- list()
for (i in 1:length(name_vec)) {
queries[[name_vec[i]]] <- query_vec[i]
}
res2 <- dbGetQuery(db, queries$TestSample)
source("./src/utils/MySqlConnect.R")
res2 <- dbGetQuery(db, queries$TestSample)
source("./src/utils/MySqlConnect.R")
dbDisconnect(db)
source("./src/utils/MySqlConnect.R")
res2 <- dbGetQuery(db, queries$TestSample)
queries_csv <- read.csv("./src/queries.csv", header = T)
View(queries_csv)
?read.csv
source("./src/utils/MySqlConnect.R")
res2 <- dbGetQuery(db, queries$TestSample)
source("./src/utils/MySqlConnect.R")
res2 <- dbGetQuery(db, queries$TestSample)
View(res)
View(res2)
ui <- fluidPage(
titlePanel("Hello!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
textInput(imie, "Podaj swoje imię: ")
?textInput
),
# Main panel for outputs ----
mainPanel(
)
)
)
ui <- fluidPage(
titlePanel("Hello!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
textInput(imie, "Podaj swoje imię: ")
?textInput
),
# Main panel for outputs ----
mainPanel(
)
)
)
?textInput
?textOutput
